"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/escape-latex";
exports.ids = ["vendor-chunks/escape-latex"];
exports.modules = {

/***/ "(ssr)/./node_modules/escape-latex/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/escape-latex/dist/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n// Map the characters to escape to their escaped values. The list is derived\n// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar defaultEscapes = {\n    \"{\": \"\\\\{\",\n    \"}\": \"\\\\}\",\n    \"\\\\\": \"\\\\textbackslash{}\",\n    \"#\": \"\\\\#\",\n    $: \"\\\\$\",\n    \"%\": \"\\\\%\",\n    \"&\": \"\\\\&\",\n    \"^\": \"\\\\textasciicircum{}\",\n    _: \"\\\\_\",\n    \"~\": \"\\\\textasciitilde{}\"\n};\nvar formatEscapes = {\n    \"–\": \"\\\\--\",\n    \"—\": \"\\\\---\",\n    \" \": \"~\",\n    \"\t\": \"\\\\qquad{}\",\n    \"\\r\\n\": \"\\\\newline{}\",\n    \"\\n\": \"\\\\newline{}\"\n};\nvar defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {\n    return _extends({}, defaultEscapes, formatEscapes);\n};\n/**\n * Escape a string to be used in LaTeX documents.\n * @param {string} str the string to be escaped.\n * @param {boolean} params.preserveFormatting whether formatting escapes should\n *  be performed (default: false).\n * @param {function} params.escapeMapFn the function to modify the escape maps.\n * @return {string} the escaped string, ready to be used in LaTeX.\n */ module.exports = function(str) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$preserveFormatti = _ref.preserveFormatting, preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti, _ref$escapeMapFn = _ref.escapeMapFn, escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;\n    var runningStr = String(str);\n    var result = \"\";\n    var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});\n    var escapeKeys = Object.keys(escapes); // as it is reused later on\n    // Algorithm: Go through the string character by character, if it matches\n    // with one of the special characters then we'll replace it with the escaped\n    // version.\n    var _loop = function _loop() {\n        var specialCharFound = false;\n        escapeKeys.forEach(function(key, index) {\n            if (specialCharFound) {\n                return;\n            }\n            if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {\n                result += escapes[escapeKeys[index]];\n                runningStr = runningStr.slice(key.length, runningStr.length);\n                specialCharFound = true;\n            }\n        });\n        if (!specialCharFound) {\n            result += runningStr.slice(0, 1);\n            runningStr = runningStr.slice(1, runningStr.length);\n        }\n    };\n    while(runningStr){\n        _loop();\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXNjYXBlLWxhdGV4L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYiw0RUFBNEU7QUFDNUUsOEVBQThFO0FBRTlFLElBQUlBLFdBQVdDLE9BQU9DLE1BQU0sSUFBSSxTQUFVQyxNQUFNO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRTtRQUFFLElBQUssSUFBSUksT0FBT0QsT0FBUTtZQUFFLElBQUlOLE9BQU9RLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFFBQVFDLE1BQU07Z0JBQUVMLE1BQU0sQ0FBQ0ssSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7WUFBRTtRQUFFO0lBQUU7SUFBRSxPQUFPTDtBQUFRO0FBRS9QLElBQUlTLGlCQUFpQjtJQUNuQixLQUFLO0lBQ0wsS0FBSztJQUNMLE1BQU07SUFDTixLQUFLO0lBQ0xDLEdBQUc7SUFDSCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTEMsR0FBRztJQUNILEtBQUs7QUFDUDtBQUNBLElBQUlDLGdCQUFnQjtJQUNsQixLQUFVO0lBQ1YsS0FBVTtJQUNWLEtBQUs7SUFDTCxLQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07QUFDUjtBQUVBLElBQUlDLHFCQUFxQixTQUFTQSxtQkFBbUJKLGNBQWMsRUFBRUcsYUFBYTtJQUNoRixPQUFPZixTQUFTLENBQUMsR0FBR1ksZ0JBQWdCRztBQUN0QztBQUVBOzs7Ozs7O0NBT0MsR0FDREUsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLEdBQUc7SUFDNUIsSUFBSUMsT0FBT2YsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUtnQixZQUFZaEIsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQzVFaUIsd0JBQXdCRixLQUFLRyxrQkFBa0IsRUFDL0NBLHFCQUFxQkQsMEJBQTBCRCxZQUFZLFFBQVFDLHVCQUNuRUUsbUJBQW1CSixLQUFLSyxXQUFXLEVBQ25DQSxjQUFjRCxxQkFBcUJILFlBQVlMLHFCQUFxQlE7SUFFeEUsSUFBSUUsYUFBYUMsT0FBT1I7SUFDeEIsSUFBSVMsU0FBUztJQUViLElBQUlDLFVBQVVKLFlBQVl6QixTQUFTLENBQUMsR0FBR1ksaUJBQWlCVyxxQkFBcUJ2QixTQUFTLENBQUMsR0FBR2UsaUJBQWlCLENBQUM7SUFDNUcsSUFBSWUsYUFBYTdCLE9BQU84QixJQUFJLENBQUNGLFVBQVUsMkJBQTJCO0lBRWxFLHlFQUF5RTtJQUN6RSw0RUFBNEU7SUFDNUUsV0FBVztJQUVYLElBQUlHLFFBQVEsU0FBU0E7UUFDbkIsSUFBSUMsbUJBQW1CO1FBQ3ZCSCxXQUFXSSxPQUFPLENBQUMsU0FBVTFCLEdBQUcsRUFBRTJCLEtBQUs7WUFDckMsSUFBSUYsa0JBQWtCO2dCQUNwQjtZQUNGO1lBQ0EsSUFBSVAsV0FBV3BCLE1BQU0sSUFBSUUsSUFBSUYsTUFBTSxJQUFJb0IsV0FBV1UsS0FBSyxDQUFDLEdBQUc1QixJQUFJRixNQUFNLE1BQU1FLEtBQUs7Z0JBQzlFb0IsVUFBVUMsT0FBTyxDQUFDQyxVQUFVLENBQUNLLE1BQU0sQ0FBQztnQkFDcENULGFBQWFBLFdBQVdVLEtBQUssQ0FBQzVCLElBQUlGLE1BQU0sRUFBRW9CLFdBQVdwQixNQUFNO2dCQUMzRDJCLG1CQUFtQjtZQUNyQjtRQUNGO1FBQ0EsSUFBSSxDQUFDQSxrQkFBa0I7WUFDckJMLFVBQVVGLFdBQVdVLEtBQUssQ0FBQyxHQUFHO1lBQzlCVixhQUFhQSxXQUFXVSxLQUFLLENBQUMsR0FBR1YsV0FBV3BCLE1BQU07UUFDcEQ7SUFDRjtJQUVBLE1BQU9vQixXQUFZO1FBQ2pCTTtJQUNGO0lBQ0EsT0FBT0o7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3NjaWVudGlmaWMtY2FsY3VsYXRvci8uL25vZGVfbW9kdWxlcy9lc2NhcGUtbGF0ZXgvZGlzdC9pbmRleC5qcz9iNjA3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vLyBNYXAgdGhlIGNoYXJhY3RlcnMgdG8gZXNjYXBlIHRvIHRoZWlyIGVzY2FwZWQgdmFsdWVzLiBUaGUgbGlzdCBpcyBkZXJpdmVkXG4vLyBmcm9tIGh0dHA6Ly93d3cuY2VzcGVkZXMub3JnL2Jsb2cvODUvaG93LXRvLWVzY2FwZS1sYXRleC1zcGVjaWFsLWNoYXJhY3RlcnNcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIGRlZmF1bHRFc2NhcGVzID0ge1xuICBcIntcIjogXCJcXFxce1wiLFxuICBcIn1cIjogXCJcXFxcfVwiLFxuICBcIlxcXFxcIjogXCJcXFxcdGV4dGJhY2tzbGFzaHt9XCIsXG4gIFwiI1wiOiBcIlxcXFwjXCIsXG4gICQ6IFwiXFxcXCRcIixcbiAgXCIlXCI6IFwiXFxcXCVcIixcbiAgXCImXCI6IFwiXFxcXCZcIixcbiAgXCJeXCI6IFwiXFxcXHRleHRhc2NpaWNpcmN1bXt9XCIsXG4gIF86IFwiXFxcXF9cIixcbiAgXCJ+XCI6IFwiXFxcXHRleHRhc2NpaXRpbGRle31cIlxufTtcbnZhciBmb3JtYXRFc2NhcGVzID0ge1xuICBcIlxcdTIwMTNcIjogXCJcXFxcLS1cIixcbiAgXCJcXHUyMDE0XCI6IFwiXFxcXC0tLVwiLFxuICBcIiBcIjogXCJ+XCIsXG4gIFwiXFx0XCI6IFwiXFxcXHFxdWFke31cIixcbiAgXCJcXHJcXG5cIjogXCJcXFxcbmV3bGluZXt9XCIsXG4gIFwiXFxuXCI6IFwiXFxcXG5ld2xpbmV7fVwiXG59O1xuXG52YXIgZGVmYXVsdEVzY2FwZU1hcEZuID0gZnVuY3Rpb24gZGVmYXVsdEVzY2FwZU1hcEZuKGRlZmF1bHRFc2NhcGVzLCBmb3JtYXRFc2NhcGVzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVmYXVsdEVzY2FwZXMsIGZvcm1hdEVzY2FwZXMpO1xufTtcblxuLyoqXG4gKiBFc2NhcGUgYSBzdHJpbmcgdG8gYmUgdXNlZCBpbiBMYVRlWCBkb2N1bWVudHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gYmUgZXNjYXBlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLnByZXNlcnZlRm9ybWF0dGluZyB3aGV0aGVyIGZvcm1hdHRpbmcgZXNjYXBlcyBzaG91bGRcbiAqICBiZSBwZXJmb3JtZWQgKGRlZmF1bHQ6IGZhbHNlKS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHBhcmFtcy5lc2NhcGVNYXBGbiB0aGUgZnVuY3Rpb24gdG8gbW9kaWZ5IHRoZSBlc2NhcGUgbWFwcy5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGVzY2FwZWQgc3RyaW5nLCByZWFkeSB0byBiZSB1c2VkIGluIExhVGVYLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRwcmVzZXJ2ZUZvcm1hdHRpID0gX3JlZi5wcmVzZXJ2ZUZvcm1hdHRpbmcsXG4gICAgICBwcmVzZXJ2ZUZvcm1hdHRpbmcgPSBfcmVmJHByZXNlcnZlRm9ybWF0dGkgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRwcmVzZXJ2ZUZvcm1hdHRpLFxuICAgICAgX3JlZiRlc2NhcGVNYXBGbiA9IF9yZWYuZXNjYXBlTWFwRm4sXG4gICAgICBlc2NhcGVNYXBGbiA9IF9yZWYkZXNjYXBlTWFwRm4gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRFc2NhcGVNYXBGbiA6IF9yZWYkZXNjYXBlTWFwRm47XG5cbiAgdmFyIHJ1bm5pbmdTdHIgPSBTdHJpbmcoc3RyKTtcbiAgdmFyIHJlc3VsdCA9IFwiXCI7XG5cbiAgdmFyIGVzY2FwZXMgPSBlc2NhcGVNYXBGbihfZXh0ZW5kcyh7fSwgZGVmYXVsdEVzY2FwZXMpLCBwcmVzZXJ2ZUZvcm1hdHRpbmcgPyBfZXh0ZW5kcyh7fSwgZm9ybWF0RXNjYXBlcykgOiB7fSk7XG4gIHZhciBlc2NhcGVLZXlzID0gT2JqZWN0LmtleXMoZXNjYXBlcyk7IC8vIGFzIGl0IGlzIHJldXNlZCBsYXRlciBvblxuXG4gIC8vIEFsZ29yaXRobTogR28gdGhyb3VnaCB0aGUgc3RyaW5nIGNoYXJhY3RlciBieSBjaGFyYWN0ZXIsIGlmIGl0IG1hdGNoZXNcbiAgLy8gd2l0aCBvbmUgb2YgdGhlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGVuIHdlJ2xsIHJlcGxhY2UgaXQgd2l0aCB0aGUgZXNjYXBlZFxuICAvLyB2ZXJzaW9uLlxuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgIHZhciBzcGVjaWFsQ2hhckZvdW5kID0gZmFsc2U7XG4gICAgZXNjYXBlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGluZGV4KSB7XG4gICAgICBpZiAoc3BlY2lhbENoYXJGb3VuZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocnVubmluZ1N0ci5sZW5ndGggPj0ga2V5Lmxlbmd0aCAmJiBydW5uaW5nU3RyLnNsaWNlKDAsIGtleS5sZW5ndGgpID09PSBrZXkpIHtcbiAgICAgICAgcmVzdWx0ICs9IGVzY2FwZXNbZXNjYXBlS2V5c1tpbmRleF1dO1xuICAgICAgICBydW5uaW5nU3RyID0gcnVubmluZ1N0ci5zbGljZShrZXkubGVuZ3RoLCBydW5uaW5nU3RyLmxlbmd0aCk7XG4gICAgICAgIHNwZWNpYWxDaGFyRm91bmQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghc3BlY2lhbENoYXJGb3VuZCkge1xuICAgICAgcmVzdWx0ICs9IHJ1bm5pbmdTdHIuc2xpY2UoMCwgMSk7XG4gICAgICBydW5uaW5nU3RyID0gcnVubmluZ1N0ci5zbGljZSgxLCBydW5uaW5nU3RyLmxlbmd0aCk7XG4gICAgfVxuICB9O1xuXG4gIHdoaWxlIChydW5uaW5nU3RyKSB7XG4gICAgX2xvb3AoKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTsiXSwibmFtZXMiOlsiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVmYXVsdEVzY2FwZXMiLCIkIiwiXyIsImZvcm1hdEVzY2FwZXMiLCJkZWZhdWx0RXNjYXBlTWFwRm4iLCJtb2R1bGUiLCJleHBvcnRzIiwic3RyIiwiX3JlZiIsInVuZGVmaW5lZCIsIl9yZWYkcHJlc2VydmVGb3JtYXR0aSIsInByZXNlcnZlRm9ybWF0dGluZyIsIl9yZWYkZXNjYXBlTWFwRm4iLCJlc2NhcGVNYXBGbiIsInJ1bm5pbmdTdHIiLCJTdHJpbmciLCJyZXN1bHQiLCJlc2NhcGVzIiwiZXNjYXBlS2V5cyIsImtleXMiLCJfbG9vcCIsInNwZWNpYWxDaGFyRm91bmQiLCJmb3JFYWNoIiwiaW5kZXgiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/escape-latex/dist/index.js\n");

/***/ })

};
;