"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/escape-latex";
exports.ids = ["vendor-chunks/escape-latex"];
exports.modules = {

/***/ "(ssr)/./node_modules/escape-latex/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/escape-latex/dist/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\n// Map the characters to escape to their escaped values. The list is derived\n// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar defaultEscapes = {\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"\\\\\": \"\\\\textbackslash{}\",\n  \"#\": \"\\\\#\",\n  $: \"\\\\$\",\n  \"%\": \"\\\\%\",\n  \"&\": \"\\\\&\",\n  \"^\": \"\\\\textasciicircum{}\",\n  _: \"\\\\_\",\n  \"~\": \"\\\\textasciitilde{}\"\n};\nvar formatEscapes = {\n  \"\\u2013\": \"\\\\--\",\n  \"\\u2014\": \"\\\\---\",\n  \" \": \"~\",\n  \"\\t\": \"\\\\qquad{}\",\n  \"\\r\\n\": \"\\\\newline{}\",\n  \"\\n\": \"\\\\newline{}\"\n};\n\nvar defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {\n  return _extends({}, defaultEscapes, formatEscapes);\n};\n\n/**\n * Escape a string to be used in LaTeX documents.\n * @param {string} str the string to be escaped.\n * @param {boolean} params.preserveFormatting whether formatting escapes should\n *  be performed (default: false).\n * @param {function} params.escapeMapFn the function to modify the escape maps.\n * @return {string} the escaped string, ready to be used in LaTeX.\n */\nmodule.exports = function (str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$preserveFormatti = _ref.preserveFormatting,\n      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,\n      _ref$escapeMapFn = _ref.escapeMapFn,\n      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;\n\n  var runningStr = String(str);\n  var result = \"\";\n\n  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});\n  var escapeKeys = Object.keys(escapes); // as it is reused later on\n\n  // Algorithm: Go through the string character by character, if it matches\n  // with one of the special characters then we'll replace it with the escaped\n  // version.\n\n  var _loop = function _loop() {\n    var specialCharFound = false;\n    escapeKeys.forEach(function (key, index) {\n      if (specialCharFound) {\n        return;\n      }\n      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {\n        result += escapes[escapeKeys[index]];\n        runningStr = runningStr.slice(key.length, runningStr.length);\n        specialCharFound = true;\n      }\n    });\n    if (!specialCharFound) {\n      result += runningStr.slice(0, 1);\n      runningStr = runningStr.slice(1, runningStr.length);\n    }\n  };\n\n  while (runningStr) {\n    _loop();\n  }\n  return result;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXNjYXBlLWxhdGV4L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTs7QUFFQSxvREFBb0QsZ0JBQWdCLHNCQUFzQixPQUFPLDJCQUEyQiwwQkFBMEIseURBQXlELGlDQUFpQzs7QUFFaFA7QUFDQSxJQUFJLE9BQU87QUFDWCxJQUFJLE9BQU87QUFDWCwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixzQkFBc0I7QUFDdEIsb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0Esb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0EsbUZBQW1GO0FBQ25GO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUNBQXVDLG1EQUFtRCxxQkFBcUI7QUFDL0cseUNBQXlDOztBQUV6QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY2llbnRpZmljLWNhbGN1bGF0b3IvLi9ub2RlX21vZHVsZXMvZXNjYXBlLWxhdGV4L2Rpc3QvaW5kZXguanM/YjFhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gTWFwIHRoZSBjaGFyYWN0ZXJzIHRvIGVzY2FwZSB0byB0aGVpciBlc2NhcGVkIHZhbHVlcy4gVGhlIGxpc3QgaXMgZGVyaXZlZFxuLy8gZnJvbSBodHRwOi8vd3d3LmNlc3BlZGVzLm9yZy9ibG9nLzg1L2hvdy10by1lc2NhcGUtbGF0ZXgtc3BlY2lhbC1jaGFyYWN0ZXJzXG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBkZWZhdWx0RXNjYXBlcyA9IHtcbiAgXCJ7XCI6IFwiXFxcXHtcIixcbiAgXCJ9XCI6IFwiXFxcXH1cIixcbiAgXCJcXFxcXCI6IFwiXFxcXHRleHRiYWNrc2xhc2h7fVwiLFxuICBcIiNcIjogXCJcXFxcI1wiLFxuICAkOiBcIlxcXFwkXCIsXG4gIFwiJVwiOiBcIlxcXFwlXCIsXG4gIFwiJlwiOiBcIlxcXFwmXCIsXG4gIFwiXlwiOiBcIlxcXFx0ZXh0YXNjaWljaXJjdW17fVwiLFxuICBfOiBcIlxcXFxfXCIsXG4gIFwiflwiOiBcIlxcXFx0ZXh0YXNjaWl0aWxkZXt9XCJcbn07XG52YXIgZm9ybWF0RXNjYXBlcyA9IHtcbiAgXCJcXHUyMDEzXCI6IFwiXFxcXC0tXCIsXG4gIFwiXFx1MjAxNFwiOiBcIlxcXFwtLS1cIixcbiAgXCIgXCI6IFwiflwiLFxuICBcIlxcdFwiOiBcIlxcXFxxcXVhZHt9XCIsXG4gIFwiXFxyXFxuXCI6IFwiXFxcXG5ld2xpbmV7fVwiLFxuICBcIlxcblwiOiBcIlxcXFxuZXdsaW5le31cIlxufTtcblxudmFyIGRlZmF1bHRFc2NhcGVNYXBGbiA9IGZ1bmN0aW9uIGRlZmF1bHRFc2NhcGVNYXBGbihkZWZhdWx0RXNjYXBlcywgZm9ybWF0RXNjYXBlcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGRlZmF1bHRFc2NhcGVzLCBmb3JtYXRFc2NhcGVzKTtcbn07XG5cbi8qKlxuICogRXNjYXBlIGEgc3RyaW5nIHRvIGJlIHVzZWQgaW4gTGFUZVggZG9jdW1lbnRzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIGJlIGVzY2FwZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHBhcmFtcy5wcmVzZXJ2ZUZvcm1hdHRpbmcgd2hldGhlciBmb3JtYXR0aW5nIGVzY2FwZXMgc2hvdWxkXG4gKiAgYmUgcGVyZm9ybWVkIChkZWZhdWx0OiBmYWxzZSkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwYXJhbXMuZXNjYXBlTWFwRm4gdGhlIGZ1bmN0aW9uIHRvIG1vZGlmeSB0aGUgZXNjYXBlIG1hcHMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBlc2NhcGVkIHN0cmluZywgcmVhZHkgdG8gYmUgdXNlZCBpbiBMYVRlWC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkcHJlc2VydmVGb3JtYXR0aSA9IF9yZWYucHJlc2VydmVGb3JtYXR0aW5nLFxuICAgICAgcHJlc2VydmVGb3JtYXR0aW5nID0gX3JlZiRwcmVzZXJ2ZUZvcm1hdHRpID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkcHJlc2VydmVGb3JtYXR0aSxcbiAgICAgIF9yZWYkZXNjYXBlTWFwRm4gPSBfcmVmLmVzY2FwZU1hcEZuLFxuICAgICAgZXNjYXBlTWFwRm4gPSBfcmVmJGVzY2FwZU1hcEZuID09PSB1bmRlZmluZWQgPyBkZWZhdWx0RXNjYXBlTWFwRm4gOiBfcmVmJGVzY2FwZU1hcEZuO1xuXG4gIHZhciBydW5uaW5nU3RyID0gU3RyaW5nKHN0cik7XG4gIHZhciByZXN1bHQgPSBcIlwiO1xuXG4gIHZhciBlc2NhcGVzID0gZXNjYXBlTWFwRm4oX2V4dGVuZHMoe30sIGRlZmF1bHRFc2NhcGVzKSwgcHJlc2VydmVGb3JtYXR0aW5nID8gX2V4dGVuZHMoe30sIGZvcm1hdEVzY2FwZXMpIDoge30pO1xuICB2YXIgZXNjYXBlS2V5cyA9IE9iamVjdC5rZXlzKGVzY2FwZXMpOyAvLyBhcyBpdCBpcyByZXVzZWQgbGF0ZXIgb25cblxuICAvLyBBbGdvcml0aG06IEdvIHRocm91Z2ggdGhlIHN0cmluZyBjaGFyYWN0ZXIgYnkgY2hhcmFjdGVyLCBpZiBpdCBtYXRjaGVzXG4gIC8vIHdpdGggb25lIG9mIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhlbiB3ZSdsbCByZXBsYWNlIGl0IHdpdGggdGhlIGVzY2FwZWRcbiAgLy8gdmVyc2lvbi5cblxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICB2YXIgc3BlY2lhbENoYXJGb3VuZCA9IGZhbHNlO1xuICAgIGVzY2FwZUtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgaWYgKHNwZWNpYWxDaGFyRm91bmQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHJ1bm5pbmdTdHIubGVuZ3RoID49IGtleS5sZW5ndGggJiYgcnVubmluZ1N0ci5zbGljZSgwLCBrZXkubGVuZ3RoKSA9PT0ga2V5KSB7XG4gICAgICAgIHJlc3VsdCArPSBlc2NhcGVzW2VzY2FwZUtleXNbaW5kZXhdXTtcbiAgICAgICAgcnVubmluZ1N0ciA9IHJ1bm5pbmdTdHIuc2xpY2Uoa2V5Lmxlbmd0aCwgcnVubmluZ1N0ci5sZW5ndGgpO1xuICAgICAgICBzcGVjaWFsQ2hhckZvdW5kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIXNwZWNpYWxDaGFyRm91bmQpIHtcbiAgICAgIHJlc3VsdCArPSBydW5uaW5nU3RyLnNsaWNlKDAsIDEpO1xuICAgICAgcnVubmluZ1N0ciA9IHJ1bm5pbmdTdHIuc2xpY2UoMSwgcnVubmluZ1N0ci5sZW5ndGgpO1xuICAgIH1cbiAgfTtcblxuICB3aGlsZSAocnVubmluZ1N0cikge1xuICAgIF9sb29wKCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/escape-latex/dist/index.js\n");

/***/ })

};
;